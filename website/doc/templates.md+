title: documentation

{{{ docMenu }}}

# template language

In site generation, `.md+`, `.html+`, `.xml+` and `.tmpl` files are run through the template engine. These files contain regular Markdown or HTML, interspersed with template expressions, which are surrounded by double curly braces `\{{` `\}}`. The template engine compiles these expressions into HTML by following the rules on this page. Each template is compiled against a *context*, which is a set of variables available to the template.

Call the current context `context`. `context["key"]` denotes fetching the value of variable `key` from context `context`.

- [fetch](#fetch)
    - [basic fetch](#basic-fetch)
    - [macro call](#macro-call)
- [control blocks](#control-blocks)
    - [\#if](#if)
    - [\#for](#for)
- [declarations](#declarations)
    - [\#macro](#macro)
    - [\#define](#define)
- [escaping](#escaping)
    - [escaping HTML](#escaping-html)
    - [escaping curly braces](#escaping-curly-braces)

# <a name="fetch"></a> fetch

## <a name="basic-fetch"></a> basic fetch
**Syntax:**

    \{{ key \}}
	
**Semantics:** Evaluates to `context["key"]`. Can also grab nested entries with dot syntax: `\{{ site.url \}}` evaluates to `context["site"]["url"]`. By default, HTML is escaped. Use triple braces to circumvent escaping, for variables containing HTML: `\{{{ linkToMyInstagram \}}}`

**Examples:**

- `\{{ title \}}` &rarr; `{{ title }}`
- `\{{ site.url \}}` &rarr; `{{ site.url }}`

## <a name="macro-call"></a> macro call
**Syntax:**

    \{{ key [parameter1 ... parameterN] \}}
	
**Semantics:** If `context["key"]` is a macro, then call it with parameters `context`, `parameter1`, ... `parameterN`. Parameters can be literals &mdash; `23.5`, `"hello"` &mdash; or variable names &mdash; `posts`, `site.url`, in which case the contents of the variable will be passed to the macro. See [declaring macros](#macro).

Triple braces work the same way as in [basic fetch](#basic-fetch), for macros that return HTML.

**Examples:**

- `\{{ formatDate date \}}` &rarr; `{{ formatDate date }}`
- `\{{{ navigationPaneHTML \}}}`

# <a name="control-blocks"></a> control blocks

## <a name="if"></a> #if
**Syntax:**

    \{{ #if key \}}
	  [A]
	[\{{ #elif key2 \}}]
	  [B]
	...
	[\{{ #else \}}]
	  [C]
	\{{ #endif \}}
	
**Semantics:** If `context["key"]` evaluates to `True`, then evaluate code block `[A]`. Otherwise, if `context["key2"]` evaluates to `True`, then evaluate block `[B]`. Otherwise, evaluate the next `#elif` condition, and so on. If none of the conditions are met, evaluate block `[C]`. `#elif` and `#else` clauses are optional. `key` can contain spaces, i.e. in the case of a macro call.

**Examples:**

- `\{{ #if title \}}\{{ title \}}\{{ #endif \}}` &rarr; `{{ title }}`
- `\{{ #if isPrime 5 \}}5 is prime!\{{ #endif }}` &rarr; `5 is prime!`

## <a name="for"></a> #for
**Syntax:**

    \{{ #for x in key \}}
	  ...
	\{{ #endfor \}}
	
**Semantics:** If `context["key"]` is a collection, then iterate through its items. (`key` can contain spaces, i.e. in the case of a macro call.) Run the code block for each value of `x` in `key`, where the code block can now access `x` as a variable.

**Examples:**

- List the newest 5 post titles:

        \{{ #for post in newest 5 posts \}}
          <div>\{{ post.title \}}</div>
    	\{{ #endif \}}

# <a name="declarations"></a> declarations

## <a name="macro"></a> #macro
**Syntax:**

    \{{ #macro name [parameter1 ... parameterN] \}}
	  ...
	\{{ #endmacro \}}
	
**Semantics:** Declares a macro named `name` that takes parameters `context`, `parameter1`, ..., `parameterN`, and returns the contents of the code block. In the inner code block, the parameters are bound to the values they were called with.

Typically, macros are declared in [macros.py]({{site.url}}/doc/site-generation.html#macros-py) and [master.tmpl]({{site.url}}/doc/site-generation.html#master-tmpl).

**Examples:**

- Macro to create HTML links:

        \{{ #macro createLink url text \}}
		  <a href="\{{ url \}}">\{{ text \}}</a>
		\{{ #endmacro \}}
		
		\{{{ createLink "http://google.com/" "Go to Google" \}}}

## <a name="define"></a> #define
**Syntax:**

    \{{ #define key value \}}
	
**Semantics:** Declares a variable `key` with value `value`, where `value` can contain spaces, i.e. in the case of a macro call.

**Examples:**

- `\{{ #define x 3 \}}`
- `\{{ #define recentPosts newest 5 posts \}}`	
		
# <a name="escaping"></a> escaping

## <a name="escaping-html"></a> escaping HTML
By default, everything in double curly braces `\{{` `\}}` will be HTML-escaped, meaning special HTML characters will be translated into HTML unicode escape codes. This prevents things like angle brackets `<` `>` from corrupting the page.

To circumvent this, enclose your expression in triple braces `\{{{` `\}}}`. This is useful for inserting HTML onto your page.

## <a name="escaping-curly-braces"></a> escaping curly braces
Delimiters can be escaped with a backslash, and the template compiler will ignore them. In the site generator, `\\{{` will output `\{{`, and `\\}}` will output `\}}`.

Note that Markdown has its own backslash escaping, so except for code blocks and links, you will need to use double backslashes: `\\\{{`.

