title: documentation

{{{ docMenu }}}

# site generation
- [the pipeline](#pipeline)
- [the context](#context)
- [templates](#templates)
- [key files](#key-files)
    * [macros.py](#macros-py)
    * [master.tmpl](#master-tmpl)
	* [meta.json](#meta-json)

# <a name="pipeline"></a> the pipeline
During site generation, each file is processed and the result is placed in the corresponding path in the output folder. Thus, the directory structure of your project is the directory structure of your site.

Files are processed as follows:

- `.md`, `.md+`, and `.html+` files are *content files*. They are compiled according to this pipeline:
> File &rarr; Local template &rarr; Master template

> The local template is the `template.tmpl` file in the current directory, or if that doesn't exist, the shallowest parent directory. The master template is the file `meta/master.tmpl`. See [templates](#templates). The result is outputted as a `.html` file in its corresponding position in the output folder.

> Note that `.md` files (without the "+") are escaped, so all double braces `\{{` `\}}` will show up literally in the output. Use a plain `.md` file when you don't want to trigger the template engine for that file.

- `.xml+` files are simply compiled against their context and outputted as an `.xml` file. This facilitates RSS documents, which are written in XML.
- `.tmpl` files are the templates: see [templates](#templates). They are not copied to the output folder.
- All other files are simply copied to their corresponding positions in the output folder.

Note that files in the `meta/` and `output/` directories do not go through the pipeline.

## example directory structure

    - Input -             -->         - Output -
	site/                             site/
	  index.html+                       index.html
	  archive.html+                     archive.html
	  meta/
		master.tmpl
		meta.json
		macros.py
	  pages/                          pages/
		template.tmpl
	    life/                           life/
		  funstuff.md                     funstuff.html
		work/                           work/
		  template.tmpl
		  meetings.md                     meetings.html
	  posts/                          posts/
		template.tmpl
		hello.md+                       hello.html
		codesamples.md+                 codesamples.html

# <a name="context"></a> the context
When a templated content file is compiled, it has access to a *context*, a set of variables that it can access. The context contains:

- A full directory tree of the site
    * Each top-level directory (besides `meta/` and `output/`) becomes a variable in the context (the name also gets lowercased.) Its value is a dictionary containing its subdirectories and files.
	* Each content file becomes a variable (the name is lowercased and all periods are replaced with underscores, so `hello.world.md` &rarr; `hello_world_md`.) Its value is a dictionary with the following items:
        -  `is_file`: equals `True`
		- `content`: the compiled HTML content of the file
        - `path`: full path of the file relative to site top. The extension of the output file is used here, so `hello.md` has path `hello.html`.
        - `date`: a [Python time struct](https://docs.python.org/2/library/time.html#time.struct_time) containing the last date modified.
- All of the values declared in `meta/meta.json` (see [meta.json](#meta-json))
- All of the macros declared in `meta/macros.py` (see [macros.py](#macros-py)) and `meta/master.tmpl`
- For Markdown files, any metadata (`key: value` pairs at the top of the file)


# <a name="templates"></a> templates
Templates are templated HTML files that take as input other unformatted HTML or Markdown files. Templates can be used to define a common layout for all files in a directory. For example, a template in your `posts/` directory could be used to format all blog posts with their date, title and content.

During site generation, each file is compiled against its *local template* (a file called `template.tmpl` in the file's directory, or if it doesn't exist, in the shallowest parent directory). Then, that output is compiled against the *master template*, `meta/master.tmpl` (see [master.tmpl](#master-tmpl)).

When a file is compiled against a template, a variable called `content` is created, with the (HTML) contents of the file as its value. Thus, the template has access to the input file through the template call, `\{{{ content \}}}`, as well as the rest of the file's context.

## example
Here is a "blog post" template that formats each post file in `posts/`:

    <article>
	  <small>\{{ formatDate date \}}</small>
	  <div>\{{ title \}}</div>
	  <div>
		\{{{ content \}}}
	  </div>
	</article>

(This requires the `date` package: use `nanosite import date`)

# <a name="key-files"></a> key files

## <a name="macros-py"></a> macros.py
`meta/macros.py` is used to define macros which call Python functions. Particularly, two methods are available in this file:

- `macro(name, function)`: `function` is a Python function that takes in a `context` and any macro parameters (in that order), and returns some value. `name` is the name of the macro. This creates a globally accessible macro which calls the Python function when the macro is invoked.
- `fetch(context, key)`: returns the value of variable `key` in `context`. `key` can contain dots for nested access, e.g. `site.url`; or spaces for macro calls, e.g. `formatDate date`.

### examples
- Sum two numbers: `macro("sum", lambda context, a, b: a + b)`
    * Usage: `\{{ sum 2 3 \}}` &rarr; `5`
- Fetch site URL: `macro("siteUrl", lambda context: fetch(context, "site.url"))`
    * Usage: `\{{ siteUrl \}}` &rarr; `{{ site.url }}`

## <a name="master-tmpl"></a> master.tmpl
`meta/master.tmpl` is the final template all content files go through. Thus, it should contain your `<html>` `</html>` tags and other global tags. You can also declare global macros via the [#macro]({{site.url}}/doc/templates.html#macro) tag.

### example

    <!DOCTYPE html>
	<html>
	  <head>
	    <title>\{{ site.title \}}</title>
	  </head>
	  <body>
	    \{{{ content \}}}
	  </body>
	</html>

## <a name="meta-json"></a> meta.json
`meta/meta.json` contains global variable declarations. Every key in the `.json` file will become a variable in the global context.

The `site.url` entry has a convenience property: the development server changes `site.url` references to `localhost`, so that you can work on an entirely local version of your site.

### example

	{
	  "site": {
		"author": "Author",
		"tagline": "Tagline",
		"title": "Title",
		"url": "http://wanganzhou.com/nanosite"
	  }
	}
